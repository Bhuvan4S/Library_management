package com.mycompany.library;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.lang.*;
import java.util.Random;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author DELL
 */
public class Book extends javax.swing.JFrame {

Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
     ResultSet rs1;
    PreparedStatement ps1;
    public String memId;
    public String ISBN;
    /**
     * Creates new form Book
     */
    public Book() {
        
            initComponents();
//            try
//            {
//                Class.forName("oracle.jdbc.OracleDriver");
//                JOptionPane.showMessageDialog(this,"Driver Loaded");
//                
//                try{
//                    con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","system","cs123");
//                    JOptionPane.showMessageDialog(this,"Connected to Database");
//                }
//                catch(SQLException ex)
//                {
//                    Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
//                    JOptionPane.showMessageDialog(this,ex.getMessage());
//                }
//                
//            }
//            catch(ClassNotFoundException ex)
//            {
//                Logger.getLogger(Book.class.getName()).log(Level.SEVERE,null, ex);
//                JOptionPane.showMessageDialog(this,ex.getMessage());
//            }
    }
    public Book(Connection con,String memId,String isbn) {
        
            initComponents();
            this.con=con;
            this.memId=memId;
            this.ISBN=isbn;
            isbn1.setText(ISBN);
            memid.setText(memId);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        isbn = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        genre = new javax.swing.JTextField();
        title = new javax.swing.JTextField();
        pyear = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        enter = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        isbn1 = new javax.swing.JTextField();
        memid = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        stat = new javax.swing.JTextField();
        mem_id1 = new javax.swing.JLabel();
        go_back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        isbn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jButton3.setText("RESERVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("BOOK INFORMATION");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GENRE");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("ISBN :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TITLE");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("YEAR OF PUBLISH");

        enter.setText("BORROW / RENEW");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("AUTHOR");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("STATUS");

        mem_id1.setText("MEMBER ID");

        go_back.setText("GO BACK");
        go_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(go_back, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(mem_id1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(memid, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(109, 109, 109)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(isbn1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(47, 47, 47))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pyear, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(112, 112, 112))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stat, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 339, Short.MAX_VALUE)
                    .addComponent(isbn)
                    .addGap(0, 340, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(144, 144, 144)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(210, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isbn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mem_id1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pyear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(go_back, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 234, Short.MAX_VALUE)
                    .addComponent(isbn)
                    .addGap(0, 235, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(412, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        try {
//            String sql="select b.title,b.genre,a.auth_name,b.yearofpublish from book_registry b,author_details a,book_authors ba where b.ISBN=ba.ISBN and ba.auth_id= a.author_id and b.ISBN=(?)";
//            ps=con.prepareStatement(sql);
//            String ISBN=isbn1.getText();
//            ps.setString(1,ISBN);
//            rs=ps.executeQuery();
//            rs.next();
//            title.setText(rs.getString(1));
//            genre.setText(rs.getString(2));
//            author.setText(rs.getString(3));
//            pyear.setText(String.valueOf(rs.getString(4)));
//            
//            //stat.setText("Hello");
//            
//            
//            String sqlproc = "{CALL book_status(?, ?, ?)}";
//            CallableStatement cs = con.prepareCall(sqlproc);
//            cs.setLong(1, Long.valueOf(isbn1.getText()));
//            cs.setString(2, memid.getText());
//            
//          
//            cs.registerOutParameter(3,Types.VARCHAR);
//            cs.executeUpdate();
//            String status=cs.getString(3);
//            System.out.println(status);
//            stat.setText(status);
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//            
//        } catch (SQLException ex) {
//            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
//        }
 try {
            String sql="select b.title,b.genre,a.auth_name,b.yearofpublish from book_registry b,author_details a,book_authors ba where b.ISBN=ba.ISBN and ba.auth_id= a.author_id and b.ISBN=(?)";
            ps=con.prepareStatement(sql);
            String ISBN=isbn1.getText();
            ps.setString(1,ISBN);
            rs=ps.executeQuery();
            rs.next();
            title.setText(rs.getString(1));
            genre.setText(rs.getString(2));
            author.setText(rs.getString(3));
            pyear.setText(String.valueOf(rs.getString(4)));
            
            //stat.setText("Hello");
            
            
            String sqlproc = "{CALL book_status(?, ?, ?)}";
            CallableStatement cs = con.prepareCall(sqlproc);
            cs.setLong(1, Long.valueOf(isbn1.getText()));
            cs.setString(2, memid.getText());
            
          
            cs.registerOutParameter(3,Types.VARCHAR);
            cs.executeUpdate();
            String status=cs.getString(3);
            stat.setText(status);
            if(status.equals("AVAILABLE"))
            {
                enter.setText("Borrow");
            }
            else if(stat.getText().equals("BORROWED"))
            {
            enter.setText("Renew");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//String isbn = isbn1.getText();
//    //String Title = title.getText();
//    String mem_id = memid.getText(); // Assuming you have a memidField for member ID
//
//    // Get the current date
//    java.util.Date currentDateUtil = new java.util.Date();
//    java.sql.Date currentDate = new java.sql.Date(currentDateUtil.getTime());
//
//    // Calculate the new Reservation_id
//    String reservationId = "";
//    try {
//        String countQuery = "SELECT COUNT(*) FROM Reservation";
//        Statement st = con.createStatement();
//        ResultSet rs = st.executeQuery(countQuery);
//        if (rs.next()) {
//            int count = rs.getInt(1);
//            reservationId = "R" + (count + 1);
//        }
//    } catch (SQLException ex) {
//        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
//        JOptionPane.showMessageDialog(this, "Error generating reservation ID: " + ex.getMessage());
//        return;
//    }
//
//    // Insert data into the Reservation table
//    String sql = "INSERT INTO Reservation (Reservation_ID,mem_id, ISBN, reserved_Date, reserve_status) VALUES (?, ?, ?, ?, ?, ?)";
//    try {
//        PreparedStatement ps = con.prepareStatement(sql);
//        ps.setString(1, reservationId);
//        ps.setString(2, mem_id);
//        ps.setString(3, isbn);
//        ps.setDate(4, currentDate);
//        ps.setString(5, "Pending");
//        ps.executeUpdate();
//        JOptionPane.showMessageDialog(this, "Reservation request accepted!");
//    }catch (SQLException ex) {
//        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
//        JOptionPane.showMessageDialog(this, "Error making reservation: " + ex.getMessage());
//    }
if(stat.getText().equals("BORROWED"))
        {   
        //renew condition
            JOptionPane.showMessageDialog(this, "Book already reserved " );
            
        }
else{
      String reservationId = "";
    try {
        String countQuery = "SELECT COUNT(*) FROM Reservation";
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery(countQuery);
        if (rs.next()) {
            int count = rs.getInt(1);
            reservationId = "RS" + (count + 1);
            System.out.println(reservationId);
        }
    } 
    catch (SQLException ex) 
    {
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error generating reservation ID: " + ex.getMessage());
        return;
    }

    // Insert data into the Reservation table
    String sql = "INSERT INTO Reservation (Reservation_ID,mem_id, ISBN, reserved_Date) VALUES (?, ?, ?,(SYSDATE))";
    try 
    {
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, reservationId);
        ps.setString(2, memid.getText());
        ps.setString(3, isbn1.getText());
        ps.executeUpdate();
        JOptionPane.showMessageDialog(this, "Reservation request accepted!");
    }
    catch (SQLException ex) 
    {
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error making reservation: " + ex.getMessage());
    }  
    }//GEN-LAST:event_jButton3ActionPerformed
    }
    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
        // TODO add your handling code here:
        if(stat.getText().equals("AVAILABLE"))
        {
            try {
                
                //borrow condition
                //enter.setText("Borrow");
                Random rand=new Random();
                String new_issue_id="I";
                
                while(true)
                {
                    int rand_int = rand.nextInt(100000);
                    new_issue_id+=String.valueOf(rand_int);
                    //System.out.println(new_issue_id);
                    String sqlproc_randomcheck="{CALL random_check_issues(?,?)}";
                    CallableStatement cs = con.prepareCall(sqlproc_randomcheck);
                    cs.setString(1,new_issue_id);
                    cs.registerOutParameter(2,Types.INTEGER);
                    cs.execute();
                    int issue_check=cs.getInt(2);
                    if(issue_check==0)
                    {
                        break;
                    }
                    System.out.println(4);
                }
                //SimpleDateFormat ft= new SimpleDateFormat("dd-MM-yyyy");
      
                String insert_issue="insert into issues(issue_id,ISBN,mem_id,issue_date) values ((?),(?),(?),(SYSDATE))"
                        + "";
                // Issue_ID,ISBN,mem_id,issue_date
                
                ps=con.prepareStatement(insert_issue);
                ps.setString(1,new_issue_id);
                ps.setLong(2, Long.parseLong(isbn1.getText()));
                ps.setString(3,memid.getText());
                ps.execute();
                JOptionPane.showMessageDialog(this, "Book Issued");
            } 
            
            catch (SQLException ex) {
                Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            else if(stat.getText().equals("BORROWED"))
            {    
            //renew condition
                //enter.setText("Renew");
                try {
                   JOptionPane.showMessageDialog(this, "Book Renewd");
                
                //borrow condition
                //enter.setText("Borrow");
                Random rand=new Random();
                String new_renew_id="R";
                
                while(true)
                {
                    int rand_int = rand.nextInt(100000);
                    new_renew_id+=String.valueOf(rand_int);
                    //System.out.println(new_renew_id);
                    String sqlproc_randomcheck="{CALL random_check_renewals(?,?)}";
                    CallableStatement cs1 = con.prepareCall(sqlproc_randomcheck);
                    cs1.setString(1,new_renew_id);
                    cs1.registerOutParameter(2,Types.INTEGER);
                    cs1.execute();
                    int renew_check=cs1.getInt(2);
                    if(renew_check==0)
                    {
                        break;
                    }
                    //System.out.println(4);
                }
                //SimpleDateFormat ft= new SimpleDateFormat("dd-MM-yyyy");
                
                String issue_id_sql="select * from issues where mem_id=(?) and isbn=(?)";
                ps=con.prepareStatement(issue_id_sql);
                ps.setString(1,memid.getText());
                ps.setString(2,isbn.getText());
               
                rs=ps.executeQuery();
                rs.next();
                String issue_id=rs.getString(1);
                System.out.println(issue_id);
                             
                
                
                String insert_renewal="insert into renewals(renew_id,issue_id,reserved_date) values ((?),(?),(SYSDATE))";
                // Issue_ID,ISBN,mem_id,issue_date
                
                
                ps1=con.prepareStatement(insert_renewal);
                ps1.setString(1,new_renew_id);
                ps1.setString(2, issue_id);
                ps1.execute();
                
                JOptionPane.showMessageDialog(this, "Book Renewed");
            } 
            
            catch (SQLException ex) {
                Logger.getLogger(Book.class.getName()).log(Level.SEVERE,null,ex);
            }
            }
       
    }//GEN-LAST:event_enterActionPerformed

    private void go_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go_backActionPerformed
        // TODO add your handling code here:
        if(memId.startsWith("L"))
                {
                    Admin admin = new Admin(con,memId);
                    admin.setVisible(true);
                    dispose();
                }
//                Admin admin = new Admin(con,mem_id.getText());
//                admin.setVisible(true);
                else{
                Home_page homePage = new Home_page(con,memId);
                homePage.setVisible(true);
                dispose();}
    }//GEN-LAST:event_go_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Book().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField author;
    private javax.swing.JButton enter;
    private javax.swing.JTextField genre;
    private javax.swing.JButton go_back;
    private javax.swing.JLabel isbn;
    private javax.swing.JTextField isbn1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel mem_id1;
    private javax.swing.JTextField memid;
    private javax.swing.JTextField pyear;
    private javax.swing.JTextField stat;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables

    
}
